{"componentChunkName":"component---src-templates-blog-post-js","path":"/ECMAScript? ES? 그게 뭘까?","result":{"data":{"site":{"siteMetadata":{"title":"Gunlog","author":"Gun Kim","siteUrl":"https://gunlog.dev","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"2cfe2ccb-1381-58c8-af10-e9b5ed5f8ba7","excerpt":"자바스크립트를 사용하면서 es5, es6 문법들을 사용하면서 대충 자바스크립트 버전 아니야? 라고 생각하고 사용했었는데, 어떻게 보면 맞다고 할 수도 있는데 어떻게 보면 아니라고 할 수 있다. 문득 궁금해져서 간략하게 나마 정리하려고 한다. ES(ECMAScript)가 뭐야? ES? 자바스크립트 버전 아니었어? 뜬금없이 ECMAScript가 뭐야? 생각이 들 수도 있다.\nimage ECMAScript는 쉽게 말하면 ECMA라는 비영리 단체가 자기네들이 만든 ECMA-26…","html":"<p>자바스크립트를 사용하면서 es5, es6 문법들을 사용하면서 대충 자바스크립트 버전 아니야? 라고 생각하고 사용했었는데, 어떻게 보면 맞다고 할 수도 있는데 어떻게 보면 아니라고 할 수 있다. 문득 궁금해져서 간략하게 나마 정리하려고 한다.</p>\n<h1 id=\"esecmascript가-뭐야\" style=\"position:relative;\"><a href=\"#esecmascript%EA%B0%80-%EB%AD%90%EC%95%BC\" aria-label=\"esecmascript가 뭐야 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES(ECMAScript)가 뭐야?</h1>\n<p><strong>ES? 자바스크립트 버전 아니었어? 뜬금없이 ECMAScript가 뭐야?</strong> 생각이 들 수도 있다.\n<img src=\"https://user-images.githubusercontent.com/45007556/99825837-e7de5e00-2b9a-11eb-86cd-3fb684123ec0.png\" alt=\"image\"></p>\n<p>ECMAScript는 쉽게 말하면 ECMA라는 비영리 단체가 자기네들이 만든 ECMA-262라는 기술 규격에 따라서 정의한 표준화된 스크립트 언어다. ES5, ES6 등은 ECMAScript의 버전5, 버전6 같은 개념으로 받아들이면 된다.</p>\n<h1 id=\"그럼-jsjavascript랑은-뭐가-달라\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9F%BC-jsjavascript%EB%9E%91%EC%9D%80-%EB%AD%90%EA%B0%80-%EB%8B%AC%EB%9D%BC\" aria-label=\"그럼 jsjavascript랑은 뭐가 달라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그럼 JS(JavaScript)랑은 뭐가 달라?</h1>\n<p><img src=\"https://user-images.githubusercontent.com/45007556/99826279-7c48c080-2b9b-11eb-8cce-3c92f971c803.png\" alt=\"image\">\nECMAScript와 JavaScript는 완전 다른 것은 아니고, JavaScript의 표준화를 위해 만들어진 게 ECMAScript이고, JavaScript는 ECMAScript의 사양을 표준으로 따르는 언어다.</p>\n<h1 id=\"es버전별로-뭐가-달라\" style=\"position:relative;\"><a href=\"#es%EB%B2%84%EC%A0%84%EB%B3%84%EB%A1%9C-%EB%AD%90%EA%B0%80-%EB%8B%AC%EB%9D%BC\" aria-label=\"es버전별로 뭐가 달라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ES버전별로 뭐가 달라?</h1>\n<p>가장 대표적인 ES5, ES6 위주로 대략적인 것만 정리해 보려고 한다.</p>\n<ul>\n<li>\n<p><strong>ES3</strong></p>\n<ul>\n<li>흔히 말하는 자바스크립트</li>\n</ul>\n</li>\n<li>\n<p><strong>ES5</strong></p>\n<ul>\n<li>배열에 <strong>forEach, map, filter, reduce, some</strong>과 같은 메소드 지원</li>\n<li>Object에 <strong>getter, setter</strong> 지원</li>\n<li>JSON 지원</li>\n</ul>\n</li>\n<li>\n<p><strong>ES6(ES 2015)</strong></p>\n<ul>\n<li><strong>let, const</strong> 키워드 추가 - 변수를 선언할 때 함수 스코프를 가진 var키워드를 대체하기 위해 여타 언어와 똑같이 <strong>블럭 스코프</strong>를 가진 <strong>let, const</strong> 키워드 추가</li>\n<li>arrow 문법 지원 - 편하고 간결하고 this 바인딩을 하지 않는 화살표 문법 추가</li>\n<li><strong>iterator, generator</strong> 추가</li>\n<li>module <strong>import, export</strong> 키워드 추가 - 모듈을 임포트 받거나, 모듈을 내보낼 수 있도록 <strong>import, export</strong> 키워드 추가</li>\n<li><strong>Promise</strong> 추가-그 동안 콜백지옥에서 고통받던 개발자들을 위해 <strong>비동기 처리하는 객체</strong> 추가</li>\n</ul>\n</li>\n<li>\n<p><strong>ES8(ECMA 2017)</strong></p>\n<ul>\n<li><strong>async - await</strong> 도입 - Promise와 같이 비동기 처리를 위한 키워드로, <strong>Promise보다 간결하고 직관적</strong>이다.</li>\n</ul>\n</li>\n<li><strong>ES7(ES2016)</strong></li>\n<li><strong>ES8(ES2017)</strong></li>\n<li><strong>ES9(ES2018)</strong></li>\n<li><strong>ES10(2019)</strong></li>\n</ul>\n<h1 id=\"브라우저마다-지원하는-ecmascript가-다르다\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%A7%88%EB%8B%A4-%EC%A7%80%EC%9B%90%ED%95%98%EB%8A%94-ecmascript%EA%B0%80-%EB%8B%A4%EB%A5%B4%EB%8B%A4\" aria-label=\"브라우저마다 지원하는 ecmascript가 다르다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브라우저마다 지원하는 ECMAScript가 다르다?</h1>\n<p><img src=\"https://user-images.githubusercontent.com/45007556/99863269-b6888100-2be0-11eb-94d4-1613cf98b5eb.png\" alt=\"image\"></p>\n<p>처음에는 ES를 단순 버전 정도로 생각해서 ES가 없데이트 되면 자동으로 모든 브라우저에서 새로 추가된 ES문법들을 지원할거라고 생각했다.\n그런데 이는 브라우저마다 다른데, 왜냐하면 브라우저 회사마다 각각의 자바스크립트 엔진이 있어서 그렇다.<br>\n그래서 만약 ES6 문법으로 개발하면 익스플로러 같은 경우 es6를 지원하지 않아서 익스플로러에서는 제대로 작동하지 않을 수 있다.\n<del>이래서 자바에서는 JVM을 만들었나 보다</del></p>\n<h2 id=\"자바스크립트-엔진들\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%97%94%EC%A7%84%EB%93%A4\" aria-label=\"자바스크립트 엔진들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트 엔진들</h2>\n<ul>\n<li><strong>Rhino</strong> - 모질라</li>\n<li><strong>SpiderMonkey</strong> - 파이어폭스</li>\n<li><strong>V8</strong> - 구글, 오페라</li>\n<li><strong>JavascriptCore</strong> - 사파리</li>\n<li><strong>Chakra</strong> - 익스플로러, 마이크로소프트 엣지</li>\n</ul>\n<h1 id=\"호환성-문제의-해결\" style=\"position:relative;\"><a href=\"#%ED%98%B8%ED%99%98%EC%84%B1-%EB%AC%B8%EC%A0%9C%EC%9D%98-%ED%95%B4%EA%B2%B0\" aria-label=\"호환성 문제의 해결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>호환성 문제의 해결</h1>\n<p>es6를 지원하지 않으면 es6 이하 버전 문법들만을 사용해서 개발하는 방법도 방법이다. 하지만 그러기에는 너무 생산성이 좋지 않다.</p>\n<h2 id=\"바벨babel을-이용한-방법\" style=\"position:relative;\"><a href=\"#%EB%B0%94%EB%B2%A8babel%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B0%A9%EB%B2%95\" aria-label=\"바벨babel을 이용한 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>바벨(Babel)을 이용한 방법</h2>\n<p><img src=\"https://user-images.githubusercontent.com/45007556/99864982-e5572500-2be9-11eb-8d57-06e5cccaae37.jpeg\" alt=\"1_DGJT51DxMSbsRNuF6J_c6Q\"></p>\n<p>그래서 이를 해결하기 위해 나온 방법이 컴파일러 및 트랜스파일러의 역할을 하는 바벨(Babel)을 이용해서 es6로 작성된 코드를 es5로 변환해서 배포하는 방법이다.</p>","frontmatter":{"title":"ECMAScript? ES? 그게 뭘까?","date":"November 21, 2020"}}},"pageContext":{"slug":"/2020/2020-11-21-ECMA-JavaScript/","previous":{"fields":{"slug":"/2020/2020-11-12-Java-Byte-String/"},"frontmatter":{"title":"Java Byte<->String 변환 방법 및 바이트로 자르기","category":"Java","draft":false}},"next":{"fields":{"slug":"/2020/2020-11-23-Flask-Hello/"},"frontmatter":{"title":"Flask 웹 프레임워크를 이용한 Hello World! 출력하기","category":"Python","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}