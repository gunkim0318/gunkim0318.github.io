{"componentChunkName":"component---src-templates-blog-post-js","path":"/코틀린에서 빌더 패턴이 필요없는 이유","result":{"data":{"site":{"siteMetadata":{"title":"Gunlog","author":"Gun Kim","siteUrl":"https://gunlog.dev","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"2e0551f9-9c1e-5e3e-bbe8-9a159b5e3483","excerpt":"코틀린으로 스프링 기반 백엔드 개발을 할 때 Lombok을 통한 빌더 패턴을 사용하지 못해서 이것만 해결되면 진짜 좋을텐데… 하면서 사용하다가 코틀린에서는 굳이 빌더 패턴을 사용하지 않더라도 비슷하게 개발이 가능하단 것을 알게 되어서 정리해보려고 한다. 자바에서 그 동안 자바에서 객체를 생성할 때 Lombok을 통해 자동으로 생성해주는 Builder…","html":"<p>코틀린으로 스프링 기반 백엔드 개발을 할 때 Lombok을 통한 빌더 패턴을 사용하지 못해서 이것만 해결되면 진짜 좋을텐데… 하면서 사용하다가 코틀린에서는 굳이 빌더 패턴을 사용하지 않더라도 비슷하게 개발이 가능하단 것을 알게 되어서 정리해보려고 한다.</p>\n<h1 id=\"자바에서\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%97%90%EC%84%9C\" aria-label=\"자바에서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바에서</h1>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ToString</span>\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@Setter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Builder</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> email<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">User</span> user1 <span class=\"token operator\">=</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gunkim\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">email</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gunkim0318@gmail.com\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">age</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">User</span> user2 <span class=\"token operator\">=</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gunkim\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">age</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그 동안 자바에서 객체를 생성할 때 Lombok을 통해 자동으로 생성해주는 Builder를 통해 객체를 생성해왔었다.</p>\n<h1 id=\"코틀린에서\" style=\"position:relative;\"><a href=\"#%EC%BD%94%ED%8B%80%EB%A6%B0%EC%97%90%EC%84%9C\" aria-label=\"코틀린에서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코틀린에서</h1>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token operator\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">var</span> email<span class=\"token operator\">:</span> <span class=\"token class-name\">String</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">var</span> age<span class=\"token operator\">:</span> <span class=\"token class-name\">Int</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">val user <span class=\"token operator\">=</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>\n    name<span class=\"token operator\">=</span><span class=\"token string\">\"gunkim\"</span><span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">=</span><span class=\"token string\">\"gunkim0318@gmail.com\"</span><span class=\"token punctuation\">,</span>\n    age<span class=\"token operator\">=</span><span class=\"token number\">10</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>위의 자바 코드를 코틀린 코드로 바꿔보면 이렇게 된다. 그런데 빌더 패턴을 사용하는 이유는 크게 두가지 때문이다.</p>\n<ol>\n<li>인자가 많을 경우 해당 인자가 어떤 것을 의미하는 지 확인하기 힘듦</li>\n<li>특정 인자만으로 생성해야 할 때가 있음(불필요 인자는 null 할당)</li>\n</ol>\n<p>그런데 위의 코드로는 1번은 만족하지만, 2번은 만족하지 않는데 그건 아래와 같이 해결이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token operator\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">var</span> email<span class=\"token operator\">:</span> <span class=\"token class-name\">String</span><span class=\"token operator\">?</span><span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">var</span> age<span class=\"token operator\">:</span> <span class=\"token class-name\">Int</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">val user <span class=\"token operator\">=</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>\n    name<span class=\"token operator\">=</span><span class=\"token string\">\"gunkim\"</span><span class=\"token punctuation\">,</span>\n    age<span class=\"token operator\">=</span><span class=\"token number\">10</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>해당 컬럼에 기본값을 주게 되면 그 인자는 값을 할당해주지 않더라도 기본값이 들어가므로 생성 할 수 있게 된다.</p>\n<h1 id=\"끝으로\" style=\"position:relative;\"><a href=\"#%EB%81%9D%EC%9C%BC%EB%A1%9C\" aria-label=\"끝으로 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>끝으로</h1>\n<p>코틀린은 자바의 단점들을 거의다 해결해주는 것 같다. 무엇보다 크게 느끼는 점은 자바에 비해 코드가 짧다는 것인데, 이미 많은 알만한 기업들은 코틀린으로 개발을 많이 한다고 하지만, 아직은 자바가 많이 쓰이는 추세이다. 하지만 근미래에는 코틀린으로 모두 옮겨지지 않을까 생각한다.</p>","frontmatter":{"title":"코틀린에서 빌더 패턴이 필요없는 이유","date":"December 24, 2020"}}},"pageContext":{"slug":"/2020/2020-12-24-kotlin-None-Builder/","previous":{"fields":{"slug":"/2020/2020-12-22-Hashtable-HashMap/"},"frontmatter":{"title":"Hashtable과 HashMap는 무슨 차이일까?","category":"Data Structure","draft":false}},"next":{"fields":{"slug":"/2020/2020-12-25-SpringBoot-MyBatis/"},"frontmatter":{"title":"스프링 부트에서 Mysql 및 마이바티스를 설정하는 법","category":"Spring","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}